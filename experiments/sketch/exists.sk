// Rohin's note: I think I screwed up the pragma line somehow, but it isn't important
// pragma  --fe-output-code --fe-output-test exists_test.sk

int WORDS = 12;
int TOPICS = 3;
int DOCS = 2;

generator int genWord(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  return word;
}

generator int genTopic(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  return {| old_topic | new_topic |};
}

generator int genDoc(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  int chosen_word = genWord(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
  return word_document[chosen_word];
}

generator int genInt(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  if(bnd == 0) {
    return ??;
  } else {
    int chosen_topic = genTopic(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    int chosen_doc = genDoc(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    int n1 = genInt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    int n2 = genInt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    int num2helper_val = num2helper[chosen_doc][chosen_topic];
    return {| ?? | num2helper_val | num2[chosen_doc] | n1 + n2 | n1 - n2 | n1 * n2 |};
  }
}

generator bit genBool(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  if(bnd == 0) {
    return (?? == 0);
  } else {
    int n1 = genInt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    int n2 = genInt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    return {| (?? == 0) | n1 == n2 |};
  }
}

// void statements not considered
generator void genBaseStmt(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  if (bnd == 0) {
    return;
  }

  if (??) {
    // choose to do a noop, akin to (void) in Racket
    return;
  }

  // Either increment or decrement the value
  int value_to_add;
  if (??) {
    value_to_add = 1;
  } else {
    value_to_add = -1;
  }

  int chosen_word = genWord(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
  int chosen_topic = genTopic(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
  int chosen_doc = genDoc(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
  if (??) {
    num2helper[chosen_doc][chosen_topic] += value_to_add;
  } else if (??) {
    num2[chosen_doc] += value_to_add;
  } else {
    word_document[chosen_word] += value_to_add;
  }
}

generator void genStmt(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic, int bnd) {
  if (??) {
    bit condition = genBool(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    if (condition) {
      genBaseStmt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    } else {
      genBaseStmt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
    }
  } else {
    genBaseStmt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, bnd - 1);
  }
}

void update_num2helper(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[WORDS] word_document, int word, int old_topic, int new_topic) {
  int doc = word_document[word];
  num2helper[doc][new_topic] += 1;
  num2helper[doc][old_topic] -= 1;
  return;
}

void update_num2(int DOCS, int TOPICS, int WORDS, ref int[TOPICS][DOCS] num2helper, ref int[DOCS] num2, ref int[WORDS] word_document, int word, int old_topic, int new_topic) {

  /*
  int doc = word_document[word];
  if (num2helper[doc][old_topic] == 0) {
    num2[doc] -= 1;
  }
  if (num2helper[doc][new_topic] == 1) {
    num2[doc] += 1;
  }
  */
  genStmt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, 3);
  genStmt(DOCS, TOPICS, WORDS, num2helper, num2, word_document, word, old_topic, new_topic, 3);
  return;
}

harness void main() {
  // int[TOPICS][DOCS] is like int[DOCS][TOPICS] in other languages
  int[TOPICS][DOCS] num2helper;
  int[DOCS] num2;
  int[WORDS] word_document = { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };

  // test case 1
  num2helper = { {2, 2, 1}, {5, 2, 0} };
  num2 = {3, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 3, 0, 1);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 3, 0, 1);
  // We need frame conditions to make sure that num2helper isn't modified.
  // Note: Equality is only one level deep, so you can't use == comparisons on
  // nested arrays. You instead have to do the following:
  assert num2helper[0] == {1, 3, 1};
  assert num2helper[1] == {5, 2, 0};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {3, 2};

  // test case 2
  num2helper = { {2, 2, 1}, {5, 2, 0} };
  num2 = {3, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 1, 2, 1);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 1, 2, 1);
  assert num2helper[0] == {2, 3, 0};
  assert num2helper[1] == {5, 2, 0};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {2, 2};

  // test case 3
  num2helper = { {2, 2, 1}, {5, 2, 0} };
  num2 = {3, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 9, 1, 0);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 9, 1, 0);
  assert num2helper[0] == {2, 2, 1};
  assert num2helper[1] == {6, 1, 0};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {3, 2};

  // test case 4
  num2helper = { {2, 2, 1}, {5, 2, 0} };
  num2 = {3, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 7, 0, 2);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 7, 0, 2);
  assert num2helper[0] == {2, 2, 1};
  assert num2helper[1] == {4, 2, 1};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {3, 3};

  // test case 5
  num2helper = { {0, 1, 4}, {5, 2, 0} };
  num2 = {2, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 0, 1, 0);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 0, 1, 0);
  assert num2helper[0] == {1, 0, 4};
  assert num2helper[1] == {5, 2, 0};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {2, 2};

  // test case 6
  num2helper = { {0, 1, 4}, {5, 2, 0} };
  num2 = {2, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 4, 1, 2);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 4, 1, 2);
  assert num2helper[0] == {0, 0, 5};
  assert num2helper[1] == {5, 2, 0};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {1, 2};

  // test case 7
  num2helper = { {0, 1, 4}, {5, 2, 0} };
  num2 = {2, 2};
  update_num2helper(DOCS, TOPICS, WORDS, num2helper, word_document, 8, 0, 2);
  update_num2(DOCS, TOPICS, WORDS, num2helper, num2, word_document, 8, 0, 2);
  assert num2helper[0] == {0, 1, 4};
  assert num2helper[1] == {4, 2, 1};
  assert word_document == { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 };
  assert num2 == {2, 3};

}
